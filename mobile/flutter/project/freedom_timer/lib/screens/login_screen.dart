import 'package:flutter/material.dart';
import 'package:freedom_timer/screens/kakao_login_webview.dart';
import 'package:freedom_timer/services/api/auth_storage_service.dart';
import 'package:freedom_timer/services/api/kakao_storage_service.dart';
import 'package:go_router/go_router.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final KakaoAuthService _kakaoAuth = KakaoAuthService();
  bool _isLoading = false;
  bool _isLoggedIn = false;

  @override
  void initState() {
    super.initState();
    _checkLoginStatus();
  }

  Future<void> _checkLoginStatus() async {
    final isLoggedIn = await _kakaoAuth.isLoggedIn();

    if (mounted) {
      setState(() {
        _isLoggedIn = isLoggedIn;
      });
    }
  }

  Future<void> _loginWithKakao() async {
    if (_isLoading) return;

    setState(() => _isLoading = true);

    try {
      print('1Îã®Í≥Ñ: Î°úÍ∑∏Ïù∏ URL ÏöîÏ≤≠');
      final loginUrl = await _kakaoAuth.getLoginUrl();

      if (!mounted) return;

      print('2Îã®Í≥Ñ: ÏõπÎ∑∞ Ïó¥Í∏∞');
      final code = await Navigator.push<String>(
        context,
        MaterialPageRoute(
          builder: (context) => KakaoLoginWebView(loginUrl: loginUrl),
        ),
      );

      if (code == null) {
        print('Î°úÍ∑∏Ïù∏ Ï∑®ÏÜåÎê®');
        setState(() => _isLoading = false);
        return;
      }

      print('3Îã®Í≥Ñ: Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Î∞è Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•');
      final userData = await _kakaoAuth.loginWithCode(code);
      print('Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ! ÌöåÏõê: ${userData['nickname']}');

      // ÌôòÏòÅ Î©îÏãúÏßÄ ÌëúÏãú
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('${userData['nickname']} Îãò! üëã Î∞òÍ∞ÄÏõå!'),
          duration: const Duration(seconds: 1),
          behavior: SnackBarBehavior.floating,
        ),
      );

      if (!mounted) return;

      setState(() {
        _isLoggedIn = true;
      });
    } catch (e, stackTrace) {
      print('Î°úÍ∑∏Ïù∏ Ïã§Ìå®: $e');

      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Î°úÍ∑∏Ïù∏ Ïã§Ìå®: $e'),
          duration: const Duration(seconds: 3),
        ),
      );
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _logout() async {
    setState(() => _isLoading = true);

    try {
      await _kakaoAuth.logout();

      if (mounted) {
        setState(() {
          _isLoggedIn = false;
        });
      }

      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å')));
    } catch (e) {
      print('Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®: $e');
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              _isLoggedIn ? 'Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú' : 'Ïπ¥Ïπ¥Ïò§Î°ú ÏãúÏûëÌïòÍ∏∞',
              style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _isLoading
                  ? null
                  : (_isLoggedIn ? _logout : _loginWithKakao),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFFFEE500),
                foregroundColor: Colors.black87,
                padding: const EdgeInsets.symmetric(
                  horizontal: 40,
                  vertical: 15,
                ),
              ),
              child: _isLoading
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : Text(
                      _isLoggedIn ? 'Î°úÍ∑∏ÏïÑÏõÉ' : 'Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏',
                      style: const TextStyle(fontSize: 16),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}
